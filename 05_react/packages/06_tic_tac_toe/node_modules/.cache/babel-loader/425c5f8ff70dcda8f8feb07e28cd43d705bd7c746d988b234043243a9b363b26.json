{"ast":null,"code":"var _jsxFileName = \"C:\\\\web\\\\05_react\\\\packages\\\\06_tic_tac_toe\\\\src\\\\components\\\\Board.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\n\n// Square component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Square({\n  value,\n  onSquareClick\n}) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"square\",\n    onClick: onSquareClick,\n    children: value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n}\n\n// Board component\n_c = Square;\nfunction Board({\n  currentTurn,\n  setCurrentTurn,\n  onGameEnd,\n  gameMode,\n  playerSymbol,\n  computerSymbol\n}) {\n  _s();\n  const [board, setBoard] = useState(Array(9).fill(null));\n  const [hoverIndex, setHoverIndex] = useState(null);\n  useEffect(() => {\n    // If it's the computer's turn, execute computer's move\n    if (gameMode === 'COMPUTER' && currentTurn === computerSymbol) {\n      handleComputerTurn(board);\n    }\n  }, [currentTurn, board, gameMode, computerSymbol]);\n  const checkWinner = board => {\n    const winPatterns = [[0, 1, 2], [3, 4, 5], [6, 7, 8],\n    // Rows\n    [0, 3, 6], [1, 4, 7], [2, 5, 8],\n    // Columns\n    [0, 4, 8], [2, 4, 6] // Diagonals\n    ];\n    for (let pattern of winPatterns) {\n      const [a, b, c] = pattern;\n      if (board[a] && board[a] === board[b] && board[a] === board[c]) {\n        return board[a];\n      }\n    }\n    return board.includes(null) ? null : 'DRAW'; // If no winner, check if board is full\n  };\n  const handleClick = index => {\n    // Prevent move if square is already filled or game is over\n    if (board[index] || gameMode === 'COMPUTER' && currentTurn === computerSymbol || onGameEnd) return;\n\n    // Update the board with the current player's symbol\n    const newBoard = [...board];\n    newBoard[index] = currentTurn;\n    setBoard(newBoard);\n\n    // Check for a winner or draw\n    const winner = checkWinner(newBoard);\n    if (winner) {\n      onGameEnd(winner);\n    } else {\n      // If it's player mode, switch to computer's turn, otherwise switch turns\n      if (gameMode === 'COMPUTER' && currentTurn === playerSymbol) {\n        setCurrentTurn(computerSymbol);\n      } else {\n        setCurrentTurn(prev => prev === 'X' ? 'O' : 'X');\n      }\n    }\n  };\n  const handleComputerTurn = board => {\n    const availableIndices = board.map((cell, index) => cell === null ? index : null).filter(val => val !== null);\n    if (availableIndices.length === 0) return;\n\n    // Randomly select a move for the computer\n    const randomIndex = availableIndices[Math.floor(Math.random() * availableIndices.length)];\n    const newBoard = [...board];\n    newBoard[randomIndex] = computerSymbol;\n    setBoard(newBoard);\n\n    // Check for a winner or draw\n    const winner = checkWinner(newBoard);\n    if (winner) {\n      onGameEnd(winner);\n    } else {\n      setCurrentTurn(playerSymbol); // Switch back to player's turn\n    }\n  };\n  const handleMouseEnter = index => {\n    if (!board[index]) setHoverIndex(index); // Highlight the square on hover\n  };\n  const handleMouseLeave = () => {\n    setHoverIndex(null); // Remove the hover highlight\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'grid',\n      gridTemplateColumns: 'repeat(3, 100px)',\n      gap: '10px'\n    },\n    children: board.map((cell, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: () => handleClick(index),\n      onMouseEnter: () => handleMouseEnter(index),\n      onMouseLeave: handleMouseLeave,\n      style: {\n        width: '100px',\n        height: '100px',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        fontSize: '24px',\n        border: '1px solid black',\n        position: 'relative',\n        backgroundColor: cell ? '#f0f0f0' : '',\n        cursor: cell ? 'not-allowed' : 'pointer'\n      },\n      children: [cell, \" \", hoverIndex === index && !cell && /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          position: 'absolute',\n          fontSize: '24px',\n          color: 'rgba(0, 0, 0, 0.5)'\n        },\n        children: currentTurn\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 13\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n}\n\n// Game component\n_s(Board, \"SyYLusjfm2MZ50XFfsFY/WBBJck=\");\n_c2 = Board;\nexport default function Game() {\n  _s2();\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  const [currentMove, setCurrentMove] = useState(0);\n  const [xScore, setXScore] = useState(0);\n  const [oScore, setOScore] = useState(0);\n  const xIsNext = currentMove % 2 === 0;\n  const currentSquares = history[currentMove];\n  const playerSymbol = 'X';\n  const computerSymbol = 'O';\n  const gameMode = 'COMPUTER'; // You can set this as 'COMPUTER' or 'PLAYER'\n\n  const handlePlay = nextSquares => {\n    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\n    setHistory(nextHistory);\n    setCurrentMove(nextHistory.length - 1);\n  };\n  const onGameEnd = winner => {\n    if (winner === 'X') {\n      setXScore(prev => prev + 1);\n    } else if (winner === 'O') {\n      setOScore(prev => prev + 1);\n    }\n    // Optionally reset the game after a winner is found\n    setTimeout(() => {\n      setHistory([Array(9).fill(null)]);\n      setCurrentMove(0);\n    }, 1500); // Reset game after 1.5 seconds\n  };\n  const jumpTo = nextMove => {\n    if (currentMove === nextMove) return;\n    setCurrentMove(nextMove);\n  };\n  const winner = checkWinner(currentSquares);\n  const moves = history.map((squares, move) => {\n    const description = move > 0 ? 'Go to move #' + move : 'Go to game start';\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => jumpTo(move),\n        children: description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this)\n    }, move, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      children: /*#__PURE__*/_jsxDEV(Board, {\n        currentTurn: xIsNext ? playerSymbol : computerSymbol,\n        setCurrentTurn: handlePlay,\n        onGameEnd: onGameEnd,\n        gameMode: gameMode,\n        playerSymbol: playerSymbol,\n        computerSymbol: computerSymbol\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"scoreboard\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"Player X: \", xScore]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"Player O: \", oScore]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n        children: moves\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 5\n  }, this);\n}\n\n// Function to check the winner\n_s2(Game, \"q1ZatmpDMzLXy/D9Gq3bWwB87Ug=\");\n_c3 = Game;\nfunction checkWinner(squares) {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a]; // Return winner symbol (X or O)\n    }\n  }\n  return null;\n}\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Square\");\n$RefreshReg$(_c2, \"Board\");\n$RefreshReg$(_c3, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Square","value","onSquareClick","className","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","Board","currentTurn","setCurrentTurn","onGameEnd","gameMode","playerSymbol","computerSymbol","_s","board","setBoard","Array","fill","hoverIndex","setHoverIndex","handleComputerTurn","checkWinner","winPatterns","pattern","a","b","c","includes","handleClick","index","newBoard","winner","prev","availableIndices","map","cell","filter","val","length","randomIndex","Math","floor","random","handleMouseEnter","handleMouseLeave","style","display","gridTemplateColumns","gap","onMouseEnter","onMouseLeave","width","height","justifyContent","alignItems","fontSize","border","position","backgroundColor","cursor","color","_c2","Game","_s2","history","setHistory","currentMove","setCurrentMove","xScore","setXScore","oScore","setOScore","xIsNext","currentSquares","handlePlay","nextSquares","nextHistory","slice","setTimeout","jumpTo","nextMove","moves","squares","move","description","_c3","lines","i","$RefreshReg$"],"sources":["C:/web/05_react/packages/06_tic_tac_toe/src/components/Board.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\n// Square component\r\nfunction Square({ value, onSquareClick }) {\r\n  return (\r\n    <button className=\"square\" onClick={onSquareClick}>\r\n      {value}\r\n    </button>\r\n  );\r\n}\r\n\r\n// Board component\r\nfunction Board({ currentTurn, setCurrentTurn, onGameEnd, gameMode, playerSymbol, computerSymbol }) {\r\n  const [board, setBoard] = useState(Array(9).fill(null));\r\n  const [hoverIndex, setHoverIndex] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // If it's the computer's turn, execute computer's move\r\n    if (gameMode === 'COMPUTER' && currentTurn === computerSymbol) {\r\n      handleComputerTurn(board);\r\n    }\r\n  }, [currentTurn, board, gameMode, computerSymbol]);\r\n\r\n  const checkWinner = (board) => {\r\n    const winPatterns = [\r\n      [0, 1, 2], [3, 4, 5], [6, 7, 8], // Rows\r\n      [0, 3, 6], [1, 4, 7], [2, 5, 8], // Columns\r\n      [0, 4, 8], [2, 4, 6],            // Diagonals\r\n    ];\r\n    for (let pattern of winPatterns) {\r\n      const [a, b, c] = pattern;\r\n      if (board[a] && board[a] === board[b] && board[a] === board[c]) {\r\n        return board[a];\r\n      }\r\n    }\r\n    return board.includes(null) ? null : 'DRAW'; // If no winner, check if board is full\r\n  };\r\n\r\n  const handleClick = (index) => {\r\n    // Prevent move if square is already filled or game is over\r\n    if (board[index] || gameMode === 'COMPUTER' && currentTurn === computerSymbol || onGameEnd) return;\r\n\r\n    // Update the board with the current player's symbol\r\n    const newBoard = [...board];\r\n    newBoard[index] = currentTurn;\r\n    setBoard(newBoard);\r\n\r\n    // Check for a winner or draw\r\n    const winner = checkWinner(newBoard);\r\n    if (winner) {\r\n      onGameEnd(winner);\r\n    } else {\r\n      // If it's player mode, switch to computer's turn, otherwise switch turns\r\n      if (gameMode === 'COMPUTER' && currentTurn === playerSymbol) {\r\n        setCurrentTurn(computerSymbol);\r\n      } else {\r\n        setCurrentTurn((prev) => (prev === 'X' ? 'O' : 'X'));\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleComputerTurn = (board) => {\r\n    const availableIndices = board.map((cell, index) => (cell === null ? index : null)).filter((val) => val !== null);\r\n    if (availableIndices.length === 0) return;\r\n\r\n    // Randomly select a move for the computer\r\n    const randomIndex = availableIndices[Math.floor(Math.random() * availableIndices.length)];\r\n    const newBoard = [...board];\r\n    newBoard[randomIndex] = computerSymbol;\r\n    setBoard(newBoard);\r\n\r\n    // Check for a winner or draw\r\n    const winner = checkWinner(newBoard);\r\n    if (winner) {\r\n      onGameEnd(winner);\r\n    } else {\r\n      setCurrentTurn(playerSymbol); // Switch back to player's turn\r\n    }\r\n  };\r\n\r\n  const handleMouseEnter = (index) => {\r\n    if (!board[index]) setHoverIndex(index); // Highlight the square on hover\r\n  };\r\n\r\n  const handleMouseLeave = () => {\r\n    setHoverIndex(null); // Remove the hover highlight\r\n  };\r\n\r\n  return (\r\n    <div style={{ display: 'grid', gridTemplateColumns: 'repeat(3, 100px)', gap: '10px' }}>\r\n      {board.map((cell, index) => (\r\n        <div\r\n          key={index}\r\n          onClick={() => handleClick(index)}\r\n          onMouseEnter={() => handleMouseEnter(index)}\r\n          onMouseLeave={handleMouseLeave}\r\n          style={{\r\n            width: '100px',\r\n            height: '100px',\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            fontSize: '24px',\r\n            border: '1px solid black',\r\n            position: 'relative',\r\n            backgroundColor: cell ? '#f0f0f0' : '',\r\n            cursor: cell ? 'not-allowed' : 'pointer',\r\n          }}\r\n        >\r\n          {cell} {/* Display X or O */}\r\n          {hoverIndex === index && !cell && (\r\n            <span\r\n              style={{\r\n                position: 'absolute',\r\n                fontSize: '24px',\r\n                color: 'rgba(0, 0, 0, 0.5)',\r\n              }}\r\n            >\r\n              {currentTurn}\r\n            </span>\r\n          )}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\n// Game component\r\nexport default function Game() {\r\n  const [history, setHistory] = useState([Array(9).fill(null)]);\r\n  const [currentMove, setCurrentMove] = useState(0);\r\n  const [xScore, setXScore] = useState(0);\r\n  const [oScore, setOScore] = useState(0);\r\n  const xIsNext = currentMove % 2 === 0;\r\n  const currentSquares = history[currentMove];\r\n\r\n  const playerSymbol = 'X';\r\n  const computerSymbol = 'O';\r\n  const gameMode = 'COMPUTER'; // You can set this as 'COMPUTER' or 'PLAYER'\r\n\r\n  const handlePlay = (nextSquares) => {\r\n    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\r\n    setHistory(nextHistory);\r\n    setCurrentMove(nextHistory.length - 1);\r\n  };\r\n\r\n  const onGameEnd = (winner) => {\r\n    if (winner === 'X') {\r\n      setXScore((prev) => prev + 1);\r\n    } else if (winner === 'O') {\r\n      setOScore((prev) => prev + 1);\r\n    }\r\n    // Optionally reset the game after a winner is found\r\n    setTimeout(() => {\r\n      setHistory([Array(9).fill(null)]);\r\n      setCurrentMove(0);\r\n    }, 1500); // Reset game after 1.5 seconds\r\n  };\r\n\r\n  const jumpTo = (nextMove) => {\r\n    if (currentMove === nextMove) return;\r\n    setCurrentMove(nextMove);\r\n  };\r\n\r\n  const winner = checkWinner(currentSquares);\r\n  const moves = history.map((squares, move) => {\r\n    const description = move > 0 ? 'Go to move #' + move : 'Go to game start';\r\n    return (\r\n      <li key={move}>\r\n        <button onClick={() => jumpTo(move)}>{description}</button>\r\n      </li>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className=\"game\">\r\n      <div className=\"game-board\">\r\n        <Board\r\n          currentTurn={xIsNext ? playerSymbol : computerSymbol}\r\n          setCurrentTurn={handlePlay}\r\n          onGameEnd={onGameEnd}\r\n          gameMode={gameMode}\r\n          playerSymbol={playerSymbol}\r\n          computerSymbol={computerSymbol}\r\n        />\r\n      </div>\r\n      <div className=\"game-info\">\r\n        <div className=\"scoreboard\">\r\n          <span>Player X: {xScore}</span>\r\n          <span>Player O: {oScore}</span>\r\n        </div>\r\n        <ol>{moves}</ol>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Function to check the winner\r\nfunction checkWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a]; // Return winner symbol (X or O)\r\n    }\r\n  }\r\n  return null;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}