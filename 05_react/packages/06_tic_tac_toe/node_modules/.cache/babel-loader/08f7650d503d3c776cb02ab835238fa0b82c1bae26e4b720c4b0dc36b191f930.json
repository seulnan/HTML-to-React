{"ast":null,"code":"var _jsxFileName = \"C:\\\\web\\\\05_react\\\\packages\\\\06_tic_tac_toe\\\\src\\\\components\\\\Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Board({\n  currentTurn,\n  setCurrentTurn,\n  onGameEnd,\n  gameMode,\n  playerSymbol,\n  computerSymbol\n}) {\n  _s();\n  const [board, setBoard] = useState(Array(9).fill(null)); // 칸 상태\n  const [hoverIndex, setHoverIndex] = useState(null);\n  useEffect(() => {\n    // 컴퓨터의 턴일 때 실행\n    if (gameMode === 'COMPUTER' && currentTurn === computerSymbol) {\n      handleComputerTurn(board);\n    }\n  }, [currentTurn, board, gameMode, computerSymbol]);\n  const checkWinner = board => {\n    const winPatterns = [[0, 1, 2], [3, 4, 5], [6, 7, 8],\n    // 가로\n    [0, 3, 6], [1, 4, 7], [2, 5, 8],\n    // 세로\n    [0, 4, 8], [2, 4, 6] // 대각선\n    ];\n    for (let pattern of winPatterns) {\n      const [a, b, c] = pattern;\n      if (board[a] && board[a] === board[b] && board[a] === board[c]) {\n        return board[a];\n      }\n    }\n    return board.includes(null) ? null : 'DRAW';\n  };\n  const handleClick = index => {\n    // 이미 클릭된 칸이거나 게임 종료 상태에서는 동작하지 않음\n    if (board[index] || onGameEnd) return;\n    const newBoard = [...board];\n    newBoard[index] = currentTurn; // 현재 턴의 기호로 칸 채우기\n    setBoard(newBoard);\n    const winner = checkWinner(newBoard);\n    if (winner) {\n      onGameEnd(winner);\n    } else {\n      if (gameMode === 'COMPUTER' && currentTurn === playerSymbol) {\n        setCurrentTurn(computerSymbol); // 컴퓨터 턴으로 변경\n      } else {\n        setCurrentTurn(prev => prev === 'X' ? 'O' : 'X'); // 다음 턴으로 변경\n      }\n    }\n  };\n  const handleComputerTurn = board => {\n    const availableIndices = board.map((cell, index) => cell === null ? index : null).filter(val => val !== null);\n    if (availableIndices.length === 0) return;\n    const randomIndex = availableIndices[Math.floor(Math.random() * availableIndices.length)];\n    const newBoard = [...board];\n    newBoard[randomIndex] = computerSymbol; // 컴퓨터 기호로 칸 채우기\n    setBoard(newBoard);\n    const winner = checkWinner(newBoard);\n    if (winner) {\n      onGameEnd(winner);\n    } else {\n      setCurrentTurn(playerSymbol); // 플레이어 턴으로 변경\n    }\n  };\n  const handleMouseEnter = index => {\n    if (!board[index]) setHoverIndex(index);\n  };\n  const handleMouseLeave = () => {\n    setHoverIndex(null);\n  };\n  const resetBoard = () => {\n    setBoard(Array(9).fill(null)); // 모든 칸 초기화\n    setCurrentTurn('X'); // 초기 턴으로 설정\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'grid',\n        gridTemplateColumns: 'repeat(3, 100px)',\n        gap: '10px'\n      },\n      children: board.map((cell, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => handleClick(index),\n        onMouseEnter: () => handleMouseEnter(index),\n        onMouseLeave: handleMouseLeave,\n        style: {\n          width: '100px',\n          height: '100px',\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          fontSize: '24px',\n          border: '1px solid black',\n          position: 'relative',\n          backgroundColor: cell ? '#f0f0f0' : '',\n          cursor: cell ? 'not-allowed' : 'pointer'\n        },\n        children: [cell, hoverIndex === index && !cell && /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            position: 'absolute',\n            fontSize: '24px',\n            color: 'rgba(0, 0, 0, 0.5)'\n          },\n          children: currentTurn\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: resetBoard,\n      style: {\n        marginTop: '20px',\n        padding: '10px 20px',\n        fontSize: '16px'\n      },\n      children: \"\\uC0C8\\uB85C\\uACE0\\uCE68\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}\n_s(Board, \"SyYLusjfm2MZ50XFfsFY/WBBJck=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Board","currentTurn","setCurrentTurn","onGameEnd","gameMode","playerSymbol","computerSymbol","_s","board","setBoard","Array","fill","hoverIndex","setHoverIndex","handleComputerTurn","checkWinner","winPatterns","pattern","a","b","c","includes","handleClick","index","newBoard","winner","prev","availableIndices","map","cell","filter","val","length","randomIndex","Math","floor","random","handleMouseEnter","handleMouseLeave","resetBoard","children","style","display","gridTemplateColumns","gap","onClick","onMouseEnter","onMouseLeave","width","height","justifyContent","alignItems","fontSize","border","position","backgroundColor","cursor","color","fileName","_jsxFileName","lineNumber","columnNumber","marginTop","padding","_c","$RefreshReg$"],"sources":["C:/web/05_react/packages/06_tic_tac_toe/src/components/Board.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nfunction Board({ currentTurn, setCurrentTurn, onGameEnd, gameMode, playerSymbol, computerSymbol }) {\r\n  const [board, setBoard] = useState(Array(9).fill(null)); // 칸 상태\r\n  const [hoverIndex, setHoverIndex] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // 컴퓨터의 턴일 때 실행\r\n    if (gameMode === 'COMPUTER' && currentTurn === computerSymbol) {\r\n      handleComputerTurn(board);\r\n    }\r\n  }, [currentTurn, board, gameMode, computerSymbol]);\r\n\r\n  const checkWinner = (board) => {\r\n    const winPatterns = [\r\n      [0, 1, 2], [3, 4, 5], [6, 7, 8], // 가로\r\n      [0, 3, 6], [1, 4, 7], [2, 5, 8], // 세로\r\n      [0, 4, 8], [2, 4, 6],            // 대각선\r\n    ];\r\n    for (let pattern of winPatterns) {\r\n      const [a, b, c] = pattern;\r\n      if (board[a] && board[a] === board[b] && board[a] === board[c]) {\r\n        return board[a];\r\n      }\r\n    }\r\n    return board.includes(null) ? null : 'DRAW';\r\n  };\r\n\r\n  const handleClick = (index) => {\r\n    // 이미 클릭된 칸이거나 게임 종료 상태에서는 동작하지 않음\r\n    if (board[index] || onGameEnd) return;\r\n\r\n    const newBoard = [...board];\r\n    newBoard[index] = currentTurn; // 현재 턴의 기호로 칸 채우기\r\n    setBoard(newBoard);\r\n\r\n    const winner = checkWinner(newBoard);\r\n    if (winner) {\r\n      onGameEnd(winner);\r\n    } else {\r\n      if (gameMode === 'COMPUTER' && currentTurn === playerSymbol) {\r\n        setCurrentTurn(computerSymbol); // 컴퓨터 턴으로 변경\r\n      } else {\r\n        setCurrentTurn((prev) => (prev === 'X' ? 'O' : 'X')); // 다음 턴으로 변경\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleComputerTurn = (board) => {\r\n    const availableIndices = board.map((cell, index) => (cell === null ? index : null)).filter((val) => val !== null);\r\n    if (availableIndices.length === 0) return;\r\n\r\n    const randomIndex = availableIndices[Math.floor(Math.random() * availableIndices.length)];\r\n    const newBoard = [...board];\r\n    newBoard[randomIndex] = computerSymbol; // 컴퓨터 기호로 칸 채우기\r\n    setBoard(newBoard);\r\n\r\n    const winner = checkWinner(newBoard);\r\n    if (winner) {\r\n      onGameEnd(winner);\r\n    } else {\r\n      setCurrentTurn(playerSymbol); // 플레이어 턴으로 변경\r\n    }\r\n  };\r\n\r\n  const handleMouseEnter = (index) => {\r\n    if (!board[index]) setHoverIndex(index);\r\n  };\r\n\r\n  const handleMouseLeave = () => {\r\n    setHoverIndex(null);\r\n  };\r\n\r\n  const resetBoard = () => {\r\n    setBoard(Array(9).fill(null)); // 모든 칸 초기화\r\n    setCurrentTurn('X'); // 초기 턴으로 설정\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(3, 100px)', gap: '10px' }}>\r\n        {board.map((cell, index) => (\r\n          <div\r\n            key={index}\r\n            onClick={() => handleClick(index)}\r\n            onMouseEnter={() => handleMouseEnter(index)}\r\n            onMouseLeave={handleMouseLeave}\r\n            style={{\r\n              width: '100px',\r\n              height: '100px',\r\n              display: 'flex',\r\n              justifyContent: 'center',\r\n              alignItems: 'center',\r\n              fontSize: '24px',\r\n              border: '1px solid black',\r\n              position: 'relative',\r\n              backgroundColor: cell ? '#f0f0f0' : '',\r\n              cursor: cell ? 'not-allowed' : 'pointer',\r\n            }}\r\n          >\r\n            {cell}\r\n            {hoverIndex === index && !cell && (\r\n              <span\r\n                style={{\r\n                  position: 'absolute',\r\n                  fontSize: '24px',\r\n                  color: 'rgba(0, 0, 0, 0.5)',\r\n                }}\r\n              >\r\n                {currentTurn}\r\n              </span>\r\n            )}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <button onClick={resetBoard} style={{ marginTop: '20px', padding: '10px 20px', fontSize: '16px' }}>\r\n        새로고침\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Board;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}