{"ast":null,"code":"var _jsxFileName = \"C:\\\\web\\\\05_react\\\\packages\\\\06_tic_tac_toe\\\\src\\\\components\\\\Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Board({\n  currentTurn,\n  setCurrentTurn,\n  onGameEnd,\n  gameMode,\n  playerSymbol,\n  computerSymbol\n}) {\n  _s();\n  const [board, setBoard] = useState(Array(9).fill(null));\n  const [hoverIndex, setHoverIndex] = useState(null);\n  useEffect(() => {\n    // 컴퓨터가 선공으로 X를 두지 않는 문제 해결\n    if (gameMode === 'COMPUTER' && currentTurn === computerSymbol) {\n      handleComputerTurn(board); // 컴퓨터가 선공으로 X를 둔다\n    }\n  }, [currentTurn, board, gameMode, computerSymbol]);\n  const checkWinner = board => {\n    const winPatterns = [[0, 1, 2], [3, 4, 5], [6, 7, 8],\n    // 가로\n    [0, 3, 6], [1, 4, 7], [2, 5, 8],\n    // 세로\n    [0, 4, 8], [2, 4, 6] // 대각선\n    ];\n    for (let pattern of winPatterns) {\n      const [a, b, c] = pattern;\n      if (board[a] && board[a] === board[b] && board[a] === board[c]) {\n        return board[a]; // 승자가 있으면 해당 기호 리턴\n      }\n    }\n    return board.includes(null) ? null : 'DRAW'; // 무승부\n  };\n\n  // const handleClick = (index) => {\n  //   // 이미 클릭된 칸이거나 게임이 종료된 상태에서는 동작하지 않음\n  //   if (board[index] || onGameEnd) return;\n\n  //   // 클릭한 칸 업데이트\n  //   const newBoard = [...board];\n  //   newBoard[index] = currentTurn;\n  //   setBoard(newBoard);\n\n  //   // 승리 조건 확인\n  //   const winner = checkWinner(newBoard);\n  //   if (winner) {\n  //     onGameEnd(winner);\n  //   } else {\n  //     // 게임 모드가 'COMPUTER'이고 플레이어 차례인 경우 컴퓨터 턴으로 전환\n  //     if (gameMode === 'COMPUTER' && currentTurn === playerSymbol) {\n  //       setCurrentTurn(computerSymbol); // 컴퓨터 턴으로 전환\n  //     } else {\n  //       setCurrentTurn((prev) => (prev === 'X' ? 'O' : 'X')); // 일반적인 턴 교대\n  //     }\n  //   }\n  // };\n  const handleClick = index => {\n    // 이미 클릭된 칸이거나 게임이 종료된 상태에서는 동작하지 않음\n    if (board[index] || gameMode === 'COMPUTER' && currentTurn === computerSymbol || onGameEnd) return;\n\n    // 클릭한 칸 업데이트\n    const newBoard = [...board];\n    newBoard[index] = currentTurn; // 클릭한 칸에 X 또는 O 추가\n    setBoard(newBoard);\n\n    // 승리 조건 확인\n    const winner = checkWinner(newBoard);\n    if (winner) {\n      onGameEnd(winner);\n    } else {\n      // 컴퓨터 모드일 경우 컴퓨터 턴으로 전환\n      if (gameMode === 'COMPUTER' && currentTurn === playerSymbol) {\n        setCurrentTurn(computerSymbol);\n      } else {\n        // 다음 턴으로 전환\n        setCurrentTurn(prev => prev === 'X' ? 'O' : 'X');\n      }\n    }\n  };\n  const handleComputerTurn = board => {\n    // 컴퓨터가 선공으로 X를 두는 로직\n    const availableIndices = board.map((cell, index) => cell === null ? index : null).filter(val => val !== null);\n    if (availableIndices.length === 0) return;\n\n    // 컴퓨터가 무작위로 선택\n    const randomIndex = availableIndices[Math.floor(Math.random() * availableIndices.length)];\n    const newBoard = [...board];\n    newBoard[randomIndex] = computerSymbol; // 컴퓨터의 기호를 둔다\n    setBoard(newBoard);\n\n    // 승리 조건 확인\n    const winner = checkWinner(newBoard);\n    if (winner) {\n      onGameEnd(winner);\n    } else {\n      setCurrentTurn(playerSymbol); // 컴퓨터 턴 후 플레이어 턴으로\n    }\n  };\n  const handleMouseEnter = index => {\n    // 빈 칸일 경우 hover 표시\n    if (!board[index]) setHoverIndex(index);\n  };\n\n  // const handleMouseLeave = () => {\n  //   setHoverIndex(null);\n  // };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'grid',\n      gridTemplateColumns: 'repeat(3, 100px)',\n      gap: '10px'\n    },\n    children: board.map((cell, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: () => handleClick(index),\n      onMouseEnter: () => handleMouseEnter(index),\n      onMouseLeave: handleMouseLeave,\n      style: {\n        width: '100px',\n        height: '100px',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        fontSize: '24px',\n        border: '1px solid black',\n        position: 'relative',\n        backgroundColor: cell ? '#f0f0f0' : '',\n        cursor: cell ? 'not-allowed' : 'pointer'\n      },\n      children: [cell, \" \", hoverIndex === index && !cell && /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          position: 'absolute',\n          fontSize: '24px',\n          color: 'rgba(0, 0, 0, 0.5)'\n        },\n        children: currentTurn\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 13\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n}\n_s(Board, \"SyYLusjfm2MZ50XFfsFY/WBBJck=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Board","currentTurn","setCurrentTurn","onGameEnd","gameMode","playerSymbol","computerSymbol","_s","board","setBoard","Array","fill","hoverIndex","setHoverIndex","handleComputerTurn","checkWinner","winPatterns","pattern","a","b","c","includes","handleClick","index","newBoard","winner","prev","availableIndices","map","cell","filter","val","length","randomIndex","Math","floor","random","handleMouseEnter","style","display","gridTemplateColumns","gap","children","onClick","onMouseEnter","onMouseLeave","handleMouseLeave","width","height","justifyContent","alignItems","fontSize","border","position","backgroundColor","cursor","color","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/web/05_react/packages/06_tic_tac_toe/src/components/Board.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nfunction Board({ currentTurn, setCurrentTurn, onGameEnd, gameMode, playerSymbol, computerSymbol }) {\r\n  const [board, setBoard] = useState(Array(9).fill(null));\r\n  const [hoverIndex, setHoverIndex] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // 컴퓨터가 선공으로 X를 두지 않는 문제 해결\r\n    if (gameMode === 'COMPUTER' && currentTurn === computerSymbol) {\r\n      handleComputerTurn(board); // 컴퓨터가 선공으로 X를 둔다\r\n    }\r\n  }, [currentTurn, board, gameMode, computerSymbol]);\r\n\r\n  const checkWinner = (board) => {\r\n    const winPatterns = [\r\n      [0, 1, 2], [3, 4, 5], [6, 7, 8], // 가로\r\n      [0, 3, 6], [1, 4, 7], [2, 5, 8], // 세로\r\n      [0, 4, 8], [2, 4, 6],            // 대각선\r\n    ];\r\n    for (let pattern of winPatterns) {\r\n      const [a, b, c] = pattern;\r\n      if (board[a] && board[a] === board[b] && board[a] === board[c]) {\r\n        return board[a];  // 승자가 있으면 해당 기호 리턴\r\n      }\r\n    }\r\n    return board.includes(null) ? null : 'DRAW';  // 무승부\r\n  };\r\n\r\n  // const handleClick = (index) => {\r\n  //   // 이미 클릭된 칸이거나 게임이 종료된 상태에서는 동작하지 않음\r\n  //   if (board[index] || onGameEnd) return;\r\n\r\n  //   // 클릭한 칸 업데이트\r\n  //   const newBoard = [...board];\r\n  //   newBoard[index] = currentTurn;\r\n  //   setBoard(newBoard);\r\n\r\n  //   // 승리 조건 확인\r\n  //   const winner = checkWinner(newBoard);\r\n  //   if (winner) {\r\n  //     onGameEnd(winner);\r\n  //   } else {\r\n  //     // 게임 모드가 'COMPUTER'이고 플레이어 차례인 경우 컴퓨터 턴으로 전환\r\n  //     if (gameMode === 'COMPUTER' && currentTurn === playerSymbol) {\r\n  //       setCurrentTurn(computerSymbol); // 컴퓨터 턴으로 전환\r\n  //     } else {\r\n  //       setCurrentTurn((prev) => (prev === 'X' ? 'O' : 'X')); // 일반적인 턴 교대\r\n  //     }\r\n  //   }\r\n  // };\r\n  const handleClick = (index) => {\r\n    // 이미 클릭된 칸이거나 게임이 종료된 상태에서는 동작하지 않음\r\n    if (board[index] || (gameMode === 'COMPUTER' && currentTurn === computerSymbol) || onGameEnd) return;\r\n  \r\n    // 클릭한 칸 업데이트\r\n    const newBoard = [...board];\r\n    newBoard[index] = currentTurn;  // 클릭한 칸에 X 또는 O 추가\r\n    setBoard(newBoard);\r\n  \r\n    // 승리 조건 확인\r\n    const winner = checkWinner(newBoard);\r\n    if (winner) {\r\n      onGameEnd(winner);\r\n    } else {\r\n      // 컴퓨터 모드일 경우 컴퓨터 턴으로 전환\r\n      if (gameMode === 'COMPUTER' && currentTurn === playerSymbol) {\r\n        setCurrentTurn(computerSymbol);\r\n      } else {\r\n        // 다음 턴으로 전환\r\n        setCurrentTurn((prev) => (prev === 'X' ? 'O' : 'X'));\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleComputerTurn = (board) => {\r\n    // 컴퓨터가 선공으로 X를 두는 로직\r\n    const availableIndices = board.map((cell, index) => (cell === null ? index : null)).filter((val) => val !== null);\r\n    if (availableIndices.length === 0) return;\r\n\r\n    // 컴퓨터가 무작위로 선택\r\n    const randomIndex = availableIndices[Math.floor(Math.random() * availableIndices.length)];\r\n    const newBoard = [...board];\r\n    newBoard[randomIndex] = computerSymbol;  // 컴퓨터의 기호를 둔다\r\n    setBoard(newBoard);\r\n\r\n    // 승리 조건 확인\r\n    const winner = checkWinner(newBoard);\r\n    if (winner) {\r\n      onGameEnd(winner);\r\n    } else {\r\n      setCurrentTurn(playerSymbol); // 컴퓨터 턴 후 플레이어 턴으로\r\n    }\r\n  };\r\n\r\n  const handleMouseEnter = (index) => {\r\n    // 빈 칸일 경우 hover 표시\r\n    if (!board[index]) setHoverIndex(index);\r\n  };\r\n\r\n  // const handleMouseLeave = () => {\r\n  //   setHoverIndex(null);\r\n  // };\r\n\r\n  return (\r\n    <div style={{ display: 'grid', gridTemplateColumns: 'repeat(3, 100px)', gap: '10px' }}>\r\n      {board.map((cell, index) => (\r\n        <div\r\n          key={index}\r\n          onClick={() => handleClick(index)}\r\n          onMouseEnter={() => handleMouseEnter(index)}\r\n          onMouseLeave={handleMouseLeave}\r\n          style={{\r\n            width: '100px',\r\n            height: '100px',\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            fontSize: '24px',\r\n            border: '1px solid black',\r\n            position: 'relative',\r\n            backgroundColor: cell ? '#f0f0f0' : '',\r\n            cursor: cell ? 'not-allowed' : 'pointer',\r\n          }}\r\n        >\r\n          {cell} {/* 클릭한 칸에 X 또는 O 기호 표시 */}\r\n          {hoverIndex === index && !cell && (\r\n            <span\r\n              style={{\r\n                position: 'absolute',\r\n                fontSize: '24px',\r\n                color: 'rgba(0, 0, 0, 0.5)',\r\n              }}\r\n            >\r\n              {currentTurn}\r\n            </span>\r\n          )}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Board;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}