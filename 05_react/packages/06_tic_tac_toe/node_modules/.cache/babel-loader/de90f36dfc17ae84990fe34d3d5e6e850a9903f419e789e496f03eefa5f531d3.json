{"ast":null,"code":"var _jsxFileName = \"C:\\\\web\\\\05_react\\\\packages\\\\06_tic_tac_toe\\\\src\\\\components\\\\Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Board({\n  currentTurn,\n  setCurrentTurn,\n  onGameEnd,\n  gameMode\n}) {\n  _s();\n  const [board, setBoard] = useState(Array(9).fill(null));\n  const [hoverIndex, setHoverIndex] = useState(null);\n\n  // 승리 검사\n  const checkWinner = board => {\n    const winPatterns = [[0, 1, 2], [3, 4, 5], [6, 7, 8],\n    // rows\n    [0, 3, 6], [1, 4, 7], [2, 5, 8],\n    // columns\n    [0, 4, 8], [2, 4, 6] // diagonals\n    ];\n    for (let pattern of winPatterns) {\n      const [a, b, c] = pattern;\n      if (board[a] && board[a] === board[b] && board[a] === board[c]) {\n        return board[a];\n      }\n    }\n    return board.includes(null) ? null : 'DRAW';\n  };\n\n  // 칸 클릭 처리\n  const handleClick = index => {\n    if (board[index] || onGameEnd) return;\n    const newBoard = [...board];\n    newBoard[index] = currentTurn;\n    setBoard(newBoard);\n    const winner = checkWinner(newBoard);\n    if (winner) {\n      onGameEnd(winner);\n    } else if (gameMode === 'COMPUTER' && currentTurn === 'X') {\n      // 컴퓨터 차례 처리\n      setTimeout(() => handleComputerTurn(newBoard), 500);\n    } else {\n      // 차례 전환\n      setCurrentTurn(prev => prev === 'X' ? 'O' : 'X');\n    }\n  };\n\n  // 컴퓨터의 랜덤 선택\n  const handleComputerTurn = board => {\n    const availableIndices = board.map((cell, index) => cell === null ? index : null).filter(val => val !== null);\n    if (availableIndices.length === 0) return;\n    const randomIndex = availableIndices[Math.floor(Math.random() * availableIndices.length)];\n    const newBoard = [...board];\n    newBoard[randomIndex] = 'O';\n    setBoard(newBoard);\n    const winner = checkWinner(newBoard);\n    if (winner) {\n      onGameEnd(winner);\n    } else {\n      setCurrentTurn('X');\n    }\n  };\n\n  // hover 상태 업데이트\n  const handleMouseEnter = index => {\n    if (!board[index]) setHoverIndex(index);\n  };\n  const handleMouseLeave = () => {\n    setHoverIndex(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'grid',\n      gridTemplateColumns: 'repeat(3, 100px)',\n      gap: '10px'\n    },\n    children: board.map((cell, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: () => handleClick(index),\n      onMouseEnter: () => handleMouseEnter(index),\n      onMouseLeave: handleMouseLeave,\n      style: {\n        width: '100px',\n        height: '100px',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        fontSize: '24px',\n        border: '1px solid black',\n        position: 'relative',\n        backgroundColor: cell ? '#f0f0f0' : '',\n        cursor: cell ? 'not-allowed' : 'pointer'\n      },\n      children: [cell, hoverIndex === index && !cell && /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          position: 'absolute',\n          fontSize: '24px',\n          color: 'rgba(0, 0, 0, 0.5)'\n        },\n        children: currentTurn\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}\n_s(Board, \"o62IX3MAPFL6cPFM4apXCajFC4A=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Board","currentTurn","setCurrentTurn","onGameEnd","gameMode","_s","board","setBoard","Array","fill","hoverIndex","setHoverIndex","checkWinner","winPatterns","pattern","a","b","c","includes","handleClick","index","newBoard","winner","setTimeout","handleComputerTurn","prev","availableIndices","map","cell","filter","val","length","randomIndex","Math","floor","random","handleMouseEnter","handleMouseLeave","style","display","gridTemplateColumns","gap","children","onClick","onMouseEnter","onMouseLeave","width","height","justifyContent","alignItems","fontSize","border","position","backgroundColor","cursor","color","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/web/05_react/packages/06_tic_tac_toe/src/components/Board.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nfunction Board({ currentTurn, setCurrentTurn, onGameEnd, gameMode }) {\r\n  const [board, setBoard] = useState(Array(9).fill(null));\r\n  const [hoverIndex, setHoverIndex] = useState(null);\r\n\r\n  // 승리 검사\r\n  const checkWinner = (board) => {\r\n    const winPatterns = [\r\n      [0, 1, 2], [3, 4, 5], [6, 7, 8], // rows\r\n      [0, 3, 6], [1, 4, 7], [2, 5, 8], // columns\r\n      [0, 4, 8], [2, 4, 6],           // diagonals\r\n    ];\r\n    for (let pattern of winPatterns) {\r\n      const [a, b, c] = pattern;\r\n      if (board[a] && board[a] === board[b] && board[a] === board[c]) {\r\n        return board[a];\r\n      }\r\n    }\r\n    return board.includes(null) ? null : 'DRAW';\r\n  };\r\n\r\n  // 칸 클릭 처리\r\n  const handleClick = (index) => {\r\n    if (board[index] || onGameEnd) return;\r\n\r\n    const newBoard = [...board];\r\n    newBoard[index] = currentTurn;\r\n    setBoard(newBoard);\r\n\r\n    const winner = checkWinner(newBoard);\r\n    if (winner) {\r\n      onGameEnd(winner);\r\n    } else if (gameMode === 'COMPUTER' && currentTurn === 'X') {\r\n      // 컴퓨터 차례 처리\r\n      setTimeout(() => handleComputerTurn(newBoard), 500);\r\n    } else {\r\n      // 차례 전환\r\n      setCurrentTurn((prev) => (prev === 'X' ? 'O' : 'X'));\r\n    }\r\n  };\r\n\r\n  // 컴퓨터의 랜덤 선택\r\n  const handleComputerTurn = (board) => {\r\n    const availableIndices = board.map((cell, index) => (cell === null ? index : null)).filter((val) => val !== null);\r\n    if (availableIndices.length === 0) return;\r\n\r\n    const randomIndex = availableIndices[Math.floor(Math.random() * availableIndices.length)];\r\n    const newBoard = [...board];\r\n    newBoard[randomIndex] = 'O';\r\n    setBoard(newBoard);\r\n\r\n    const winner = checkWinner(newBoard);\r\n    if (winner) {\r\n      onGameEnd(winner);\r\n    } else {\r\n      setCurrentTurn('X');\r\n    }\r\n  };\r\n\r\n  // hover 상태 업데이트\r\n  const handleMouseEnter = (index) => {\r\n    if (!board[index]) setHoverIndex(index);\r\n  };\r\n\r\n  const handleMouseLeave = () => {\r\n    setHoverIndex(null);\r\n  };\r\n\r\n  return (\r\n    <div style={{ display: 'grid', gridTemplateColumns: 'repeat(3, 100px)', gap: '10px' }}>\r\n      {board.map((cell, index) => (\r\n        <div\r\n          key={index}\r\n          onClick={() => handleClick(index)}\r\n          onMouseEnter={() => handleMouseEnter(index)}\r\n          onMouseLeave={handleMouseLeave}\r\n          style={{\r\n            width: '100px',\r\n            height: '100px',\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            fontSize: '24px',\r\n            border: '1px solid black',\r\n            position: 'relative',\r\n            backgroundColor: cell ? '#f0f0f0' : '',\r\n            cursor: cell ? 'not-allowed' : 'pointer',\r\n          }}\r\n        >\r\n          {cell}\r\n          {hoverIndex === index && !cell && (\r\n            <span\r\n              style={{\r\n                position: 'absolute',\r\n                fontSize: '24px',\r\n                color: 'rgba(0, 0, 0, 0.5)',\r\n              }}\r\n            >\r\n              {currentTurn}\r\n            </span>\r\n          )}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Board;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}